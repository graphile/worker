"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[6961],{9916:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>g});var t=r(3696);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(r),y=a,g=c["".concat(s,".").concat(y)]||c[y]||p[y]||o;return r?t.createElement(g,i(i({ref:n},d),{},{components:r})):t.createElement(g,i({ref:n},d))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},5180:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=r(8102),a=(r(3696),r(9916));const o={title:"Library: queueing jobs",sidebar_position:65,sidebar_label:"Queueing jobs"},i=void 0,l={unversionedId:"library/queue",id:"library/queue",title:"Library: queueing jobs",description:"You can also use the graphile-worker library to queue jobs using one of the",source:"@site/docs/library/queue.md",sourceDirName:"library",slug:"/library/queue",permalink:"/docs/library/queue",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/queue.md",tags:[],version:"current",sidebarPosition:65,frontMatter:{title:"Library: queueing jobs",sidebar_position:65,sidebar_label:"Queueing jobs"},sidebar:"tutorialSidebar",previous:{title:"Running jobs",permalink:"/docs/library/run"},next:{title:"addJob()",permalink:"/docs/library/add-job"}},s={},u=[{value:"<code>makeWorkerUtils()</code>",id:"makeworkerutils",level:2},{value:"<code>WorkerUtilsOptions</code>",id:"workerutilsoptions",level:2},{value:"<code>WorkerUtils</code>",id:"workerutils",level:2},{value:"<code>addJobAdhoc()</code>",id:"addjobadhoc",level:2}],d={toc:u},c="wrapper";function p(e){let{components:n,...r}=e;return(0,a.yg)(c,(0,t.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"You can also use the ",(0,a.yg)("inlineCode",{parentName:"p"},"graphile-worker")," library to queue jobs using one of the\nfollowing APIs."),(0,a.yg)("p",null,"NOTE: although running the worker will automatically install its schema, the\nsame is not true for queuing jobs. You must ensure that the worker database\nschema is installed before you attempt to enqueue a job; you can install the\ndatabase schema into your database with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'yarn graphile-worker -c "postgres:///my_db" --schema-only\n')),(0,a.yg)("p",null,"Alternatively you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"WorkerUtils")," migrate method:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"await workerUtils.migrate();\n")),(0,a.yg)("h2",{id:"makeworkerutils"},(0,a.yg)("inlineCode",{parentName:"h2"},"makeWorkerUtils()")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function makeWorkerUtils(options: WorkerUtilsOptions): Promise<WorkerUtils>;\n")),(0,a.yg)("p",null,"Useful for adding jobs from within JavaScript in an efficient way."),(0,a.yg)("p",null,"Runnable example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'const { makeWorkerUtils } = require("graphile-worker");\n\nasync function main() {\n  const workerUtils = await makeWorkerUtils({\n    connectionString: "postgres:///my_db",\n  });\n  try {\n    await workerUtils.migrate();\n\n    await workerUtils.addJob(\n      // Task identifier\n      "calculate-life-meaning",\n\n      // Payload\n      { value: 42 },\n\n      // Optionally, add further task spec details here\n    );\n\n    // await workerUtils.addJob(...);\n    // await workerUtils.addJob(...);\n    // await workerUtils.addJob(...);\n  } finally {\n    await workerUtils.release();\n  }\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')),(0,a.yg)("p",null,"We recommend building one instance of ",(0,a.yg)("inlineCode",{parentName:"p"},"WorkerUtils")," and sharing it as a\nsingleton throughout your code."),(0,a.yg)("h2",{id:"workerutilsoptions"},(0,a.yg)("inlineCode",{parentName:"h2"},"WorkerUtilsOptions")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"exactly one of these keys must be present to determine how to connect to the\ndatabase:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"connectionString"),": A PostgreSQL\n",(0,a.yg)("a",{parentName:"li",href:"/docs/connection-string"},"connection string")," to the database containing the\njob queue, or"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pgPool"),": A ",(0,a.yg)("inlineCode",{parentName:"li"},"pg.Pool")," instance to use"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"schema")," can be used to change the default ",(0,a.yg)("inlineCode",{parentName:"li"},"graphile_worker")," schema to\nsomething else (equivalent to ",(0,a.yg)("inlineCode",{parentName:"li"},"--schema")," on the CLI)")),(0,a.yg)("h2",{id:"workerutils"},(0,a.yg)("inlineCode",{parentName:"h2"},"WorkerUtils")),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"WorkerUtils")," instance has the following methods:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"addJob(name: string, payload: JSON, spec: TaskSpec)")," ","\u2014"," a method you can\ncall to enqueue a job, see ",(0,a.yg)("a",{parentName:"li",href:"/docs/library/add-job"},"addJob"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"migrate()")," ","\u2014"," a method you can call to update the graphile-worker\ndatabase schema; returns a promise."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"release()")," ","\u2014"," call this to release the ",(0,a.yg)("inlineCode",{parentName:"li"},"WorkerUtils")," instance. It","'","s\ntypically best to use ",(0,a.yg)("inlineCode",{parentName:"li"},"WorkerUtils")," as a singleton, so you often won","'","t\nneed this, but it","'","s useful for tests or processes where you want Node to\nexit cleanly when it","'","s done.")),(0,a.yg)("h2",{id:"addjobadhoc"},(0,a.yg)("inlineCode",{parentName:"h2"},"addJobAdhoc()")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function addJobAdhoc(options: WorkerUtilsOptions, ...addJobArgs): Promise<Job>;\n")),(0,a.yg)("p",null,"If you want to quickly add a job and you don","'","t mind the cost of opening a\nDB connection pool and then cleaning it up right away ",(0,a.yg)("em",{parentName:"p"},"for every job added"),",\nthere","'","s the ",(0,a.yg)("inlineCode",{parentName:"p"},"addJobAdhoc")," convenience function. It takes the same options\nas ",(0,a.yg)("inlineCode",{parentName:"p"},"makeWorkerUtils")," as the first argument; the remaining arguments are for\n",(0,a.yg)("a",{parentName:"p",href:"/docs/library/add-job"},(0,a.yg)("inlineCode",{parentName:"a"},"addJob")),"."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"You are recommended to use ",(0,a.yg)("inlineCode",{parentName:"p"},"makeWorkerUtils")," instead where possible, but in\none-off scripts this convenience method may be enough.")),(0,a.yg)("p",null,"Runnable example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'const { addJobAdhoc } = require("graphile-worker");\n\nasync function main() {\n  await addJobAdhoc(\n    // makeWorkerUtils options\n    { connectionString: "postgres:///my_db" },\n\n    // Task identifier\n    "calculate-life-meaning",\n\n    // Payload\n    { value: 42 },\n\n    // Optionally, add further task spec details here\n  );\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')))}p.isMDXComponent=!0}}]);