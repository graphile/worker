"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[3624],{9916:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(3696);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(8102),o=(t(3696),t(9916));const a={title:"Performance",sidebar_position:120},i=void 0,s={unversionedId:"performance",id:"performance",title:"Performance",description:"graphile-worker is not intended to replace extremely high performance",source:"@site/docs/performance.md",sourceDirName:".",slug:"/performance",permalink:"/docs/performance",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/performance.md",tags:[],version:"current",sidebarPosition:120,frontMatter:{title:"Performance",sidebar_position:120},sidebar:"tutorialSidebar",previous:{title:"Forbidden flags",permalink:"/docs/forbidden-flags"},next:{title:"Error handling",permalink:"/docs/error-handling"}},l={},c=[{value:"perfTest results:",id:"perftest-results",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"graphile-worker")," is not intended to replace extremely high performance\ndedicated job queues, it","'","s intended to be a very easy way to get a\nreasonably performant job queue up and running with Node.js and PostgreSQL. But\nthis doesn","'","t mean it","'","s a slouch by any means ","\u2014"," it achieves an\naverage latency from triggering a job in one process to executing it in another\nof under 3ms, and a 12-core database server can queue around 99,600 jobs per\nsecond and can process around 11,800 jobs per second."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"graphile-worker")," is horizontally scalable to a point. Each instance has a\ncustomizable worker pool, this pool defaults to size 1 (only one job at a time\non this worker) but depending on the nature of your tasks (i.e. assuming\nthey","'","re not compute-heavy) you will likely want to set this higher to\nbenefit from Node.js","'"," concurrency. If your tasks are compute heavy you may\nstill wish to set it higher and then using Node","'","s ",(0,o.yg)("inlineCode",{parentName:"p"},"child_process")," (or Node\nv11","'","s ",(0,o.yg)("inlineCode",{parentName:"p"},"worker_threads"),") to share the compute load over multiple cores\nwithout significantly impacting the main worker","'","s run loop. Note, however,\nthat Graphile Worker is limited by the performance of the underlying Postgres\ndatabase, and when you hit this limit performance will start to go down (rather\nthan up) as you add more workers."),(0,o.yg)("p",null,"To test performance, you can run ",(0,o.yg)("inlineCode",{parentName:"p"},"yarn perfTest"),". This runs three tests:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"a startup/shutdown test to see how fast the worker can startup and exit if\nthere","'","s no jobs queued (this includes connecting to the database and\nensuring the migrations are up to date)"),(0,o.yg)("li",{parentName:"ol"},"a load test ","\u2014"," by default this will run 20,000\n",(0,o.yg)("a",{parentName:"li",href:"https://github.com/graphile/worker/blob/main/perfTest/tasks/log_if_999.js"},"trivial"),"\njobs with a parallelism of 4 (i.e. 4 node processes) and a concurrency of 10\n(i.e. 10 concurrent jobs running on each node process), but you can configure\nthis in ",(0,o.yg)("inlineCode",{parentName:"li"},"perfTest/run.js"),". (These settings were optimized for a 12-core\nhyper-threading machine running both the tests and the database locally.)"),(0,o.yg)("li",{parentName:"ol"},"a latency test ","\u2014"," determining how long between issuing an ",(0,o.yg)("inlineCode",{parentName:"li"},"add_job"),"\ncommand and the task itself being executed.")),(0,o.yg)("h2",{id:"perftest-results"},"perfTest results:"),(0,o.yg)("p",null,"The test was ran on a 12-core AMD Ryzen 3900 with an M.2 SSD, running both the\nworkers and the database (and a tonne of Chrome tabs, electron apps, and what\nnot). Jobs=20000, parallelism=4, concurrency=10."),(0,o.yg)("p",null,"Conclusion:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Startup/shutdown: 110ms"),(0,o.yg)("li",{parentName:"ul"},"Jobs per second: 11,851"),(0,o.yg)("li",{parentName:"ul"},"Average latency: 2.66ms (min: 2.39ms, max: 12.09ms)")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"Timing startup/shutdown time...\n... it took 110ms\n\nScheduling 20000 jobs\nAdding jobs: 200.84ms\n... it took 287ms\n\n\nTiming 20000 job execution...\nFound 999!\n\n... it took 1797ms\nJobs per second: 11851.90\n\n\nTesting latency...\n[core] INFO: Worker connected and looking for jobs... (task names: 'latency')\nBeginning latency test\nLatencies - min: 2.39ms, max: 12.09ms, avg: 2.66ms\n")),(0,o.yg)("p",null,"TODO: post perfTest results in a more reasonable configuration, e.g. using an\nRDS PostgreSQL server and a worker running on EC2."))}d.isMDXComponent=!0}}]);