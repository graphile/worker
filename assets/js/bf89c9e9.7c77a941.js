"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[2644],{9916:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>c});var t=r(3696);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var g=t.createContext({}),s=function(e){var n=t.useContext(g),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,g=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,c=u["".concat(g,".").concat(m)]||u[m]||y[m]||o;return r?t.createElement(c,i(i({ref:n},p),{},{components:r})):t.createElement(c,i({ref:n},p))}));function c(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3229:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=r(8102),a=(r(3696),r(9916));const o={title:"Library: Logger",sidebar_label:"Logger"},i=void 0,l={unversionedId:"library/logger",id:"library/logger",title:"Library: Logger",description:"We use @graphile/logger as a log",source:"@site/docs/library/logger.md",sourceDirName:"library",slug:"/library/logger",permalink:"/docs/library/logger",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/logger.md",tags:[],version:"current",frontMatter:{title:"Library: Logger",sidebar_label:"Logger"},sidebar:"tutorialSidebar",previous:{title:"addJobs()",permalink:"/docs/library/add-jobs"},next:{title:"Database schema",permalink:"/docs/schema"}},g={},s=[],p={toc:s},u="wrapper";function y(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"We use ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/logger"},(0,a.yg)("inlineCode",{parentName:"a"},"@graphile/logger"))," as a log\nabstraction so that you can log to whatever logging facilities you like. By\ndefault this will log to ",(0,a.yg)("inlineCode",{parentName:"p"},"console"),", and debug-level messages are not output\nunless you have the environmental variable ",(0,a.yg)("inlineCode",{parentName:"p"},"GRAPHILE_LOGGER_DEBUG=1"),". You can\noverride this by passing a custom ",(0,a.yg)("inlineCode",{parentName:"p"},"logger"),"."),(0,a.yg)("p",null,"It","'","s recommended that your tasks always use the methods on ",(0,a.yg)("inlineCode",{parentName:"p"},"helpers.logger"),"\nfor logging so that you can later route your messages to a different log store\nif you want to. There are 4 methods, one for each level of severity (",(0,a.yg)("inlineCode",{parentName:"p"},"error"),",\n",(0,a.yg)("inlineCode",{parentName:"p"},"warn"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"info"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"debug"),"), and each accept a string as the first argument and\noptionally an arbitrary object as the second argument:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"helpers.logger.error(message: string, meta?: LogMeta)")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"helpers.logger.warn(message: string, meta?: LogMeta)")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"helpers.logger.info(message: string, meta?: LogMeta)")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"helpers.logger.debug(message: string, meta?: LogMeta)"))),(0,a.yg)("p",null,"You may customize where log messages from ",(0,a.yg)("inlineCode",{parentName:"p"},"graphile-worker")," (and your tasks) go\nby supplying a custom ",(0,a.yg)("inlineCode",{parentName:"p"},"Logger")," instance using your own ",(0,a.yg)("inlineCode",{parentName:"p"},"logFactory"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const { Logger, run } = require(\"graphile-worker\");\n\n/* Replace this function with your own implementation */\nfunction logFactory(scope) {\n  return (level, message, meta) => {\n    console.log(level, message, scope, meta);\n  };\n}\n\nconst logger = new Logger(logFactory);\n\n// Pass the logger to the 'run' method as part of options:\nrun({\n  logger,\n  /* pgPool, taskList, etc... */\n});\n")),(0,a.yg)("p",null,"Your ",(0,a.yg)("inlineCode",{parentName:"p"},"logFactory")," function will be passed a scope object which may contain the\nfollowing keys (all optional):"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"label")," (string): a rough description of the type of action\n(","\u2018","worker","\u2019"," and ","\u2018","job","\u2019"," are the currently used values)."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"workerId")," (string): the ID of the worker instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"taskIdentifier")," (string): the task name (identifier) of the running job"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"jobId")," (number): the id of the running job")),(0,a.yg)("p",null,"And it should return a logger function which will receive these three arguments:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"level")," (","\u2018","error","\u2019",", ","\u2018","warning","\u2019",", ","\u2018","info","\u2019"," or\n","\u2018","debug","\u2019",") ","\u2014"," severity of the log message"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string) ","\u2014"," the log message itself"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"meta")," (optional object) ","\u2014"," may contain other useful metadata, useful in\nstructured logging systems")),(0,a.yg)("p",null,"The return result of the logger function is currently ignored; but we strongly\nrecommend that for future compatibility you do not return anything from your\nlogger function."),(0,a.yg)("p",null,"See the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/logger"},(0,a.yg)("inlineCode",{parentName:"a"},"@graphile/logger"))," documentation\nfor more information."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"You do not need to (and should not) customize, inherit or extend the ",(0,a.yg)("inlineCode",{parentName:"p"},"Logger"),"\nclass at all.")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Some log messages are gated behind the ",(0,a.yg)("inlineCode",{parentName:"p"},"GRAPHILE_ENABLE_DANGEROUS_LOGS=1"),"\nenvironmental variable ","\u2014"," to see them you will need to enable that envvar\nAND enable debug logging (e.g. with ",(0,a.yg)("inlineCode",{parentName:"p"},"GRAPHILE_LOGGER_DEBUG=1")," as mentioned\nabove) ","\u2014"," do not do this in production as these logs may include incredibly\nsensitive details such as your full database connection string including\npassword.")))}y.isMDXComponent=!0}}]);