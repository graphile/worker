"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[2926],{9916:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var r=t(3696);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),y=a,m=u["".concat(s,".").concat(y)]||u[y]||c[y]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},9420:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(8102),a=(t(3696),t(9916));const o={title:"addJobs()"},i=void 0,l={unversionedId:"library/add-jobs",id:"library/add-jobs",title:"addJobs()",description:"This API may change in a semver minor release.",source:"@site/docs/library/add-jobs.md",sourceDirName:"library",slug:"/library/add-jobs",permalink:"/docs/library/add-jobs",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/add-jobs.md",tags:[],version:"current",frontMatter:{title:"addJobs()"},sidebar:"tutorialSidebar",previous:{title:"addJob()",permalink:"/docs/library/add-job"},next:{title:"Logger",permalink:"/docs/library/logger"}},s={},d=[],p={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("admonition",{title:"Experimental",type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"This API may change in a semver minor release.")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"addJobs")," API exists in many places in graphile-worker, but all the\ninstances have exactly the same call signature. The API is used to efficiently\nadd a batch of jobs to the queue for immediate or delayed execution. With\n",(0,a.yg)("inlineCode",{parentName:"p"},"jobKey")," it can also be used to replace existing jobs."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"addJobs()")," JavaScript method simply defers to the underlying\n",(0,a.yg)("a",{parentName:"p",href:"/docs/sql-add-job#graphile_workeradd_jobs"},(0,a.yg)("inlineCode",{parentName:"a"},"addJobs"))," SQL function.")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"addJobs")," arguments are as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"jobSpecs"),": descriptions of the jobs you want to queue"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"jobKeyPreserveRunAt"),": optional boolean; if true, ",(0,a.yg)("inlineCode",{parentName:"li"},"run_at")," will not be updated\nwhen a job is overwritten due to ",(0,a.yg)("inlineCode",{parentName:"li"},"jobKey"))),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'await addJobs([\n  { identifier: "send_email", payload: { to: "someone@example.com" } },\n  { identifier: "send_email", payload: { to: "anyone@example.com" } },\n  { identifier: "send_email", payload: { to: "thisone@example.com" } },\n  { identifier: "send_email", payload: { to: "anotherone@example.com" } },\n]);\n')),(0,a.yg)("p",null,"Definitions:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"export type AddJobsFunction = (\n  jobSpecs: AddJobsJobSpec[],\n  jobKeyPreserveRunAt?: boolean,\n) => Promise<ReadonlyArray<Job>>;\n\nexport interface AddJobsJobSpec {\n  /**\n   * The name of the task that will be executed for this job.\n   */\n  identifier: string;\n\n  /**\n   * The payload (typically a JSON object) that will be passed to the task executor.\n   */\n  payload: unknown;\n\n  /**\n   * The queue to run this task under (only specify if you want jobs in this\n   * queue to run serially). (Default: null)\n   */\n  queueName?: string;\n\n  /**\n   * A Date to schedule this task to run in the future. (Default: now)\n   */\n  runAt?: Date;\n\n  /**\n   * Jobs are executed in numerically ascending order of priority (jobs with a\n   * numerically smaller priority are run first). (Default: 0)\n   */\n  priority?: number;\n\n  /**\n   * How many retries should this task get? (Default: 25)\n   */\n  maxAttempts?: number;\n\n  /**\n   * Unique identifier for the job, can be used to update or remove it later if\n   * needed. (Default: null)\n   */\n  jobKey?: string;\n\n  /**\n   * Flags for the job, can be used to dynamically filter which jobs can and\n   * cannot run at runtime. (Default: null)\n   */\n  flags?: string[];\n}\n")))}c.isMDXComponent=!0}}]);