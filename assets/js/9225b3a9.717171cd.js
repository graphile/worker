"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[5950],{9916:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>m});var t=r(3696);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(r),d=o,m=g["".concat(s,".").concat(d)]||g[d]||c[d]||i;return r?t.createElement(m,a(a({ref:n},u),{},{components:r})):t.createElement(m,a({ref:n},u))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6324:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=r(8102),o=(r(3696),r(9916));const i={title:"Configuration",sidebar_position:41},a=void 0,l={unversionedId:"config",id:"config",title:"Configuration",description:"Graphile Worker does not require a configuration file, but you may find that",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/docs/config",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/config.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{title:"Configuration",sidebar_position:41},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Connection strings",permalink:"/docs/connection-string"}},s={},p=[{value:"Examples",id:"examples",level:2},{value:"<code>worker</code> options",id:"worker-options",level:2},{value:"worker.concurrentJobs",id:"workerconcurrentjobs",level:3},{value:"worker.connectionString",id:"workerconnectionstring",level:3},{value:"worker.crontabFile",id:"workercrontabfile",level:3},{value:"worker.events",id:"workerevents",level:3},{value:"worker.fileExtensions",id:"workerfileextensions",level:3},{value:"worker.gracefulShutdownAbortTimeout",id:"workergracefulshutdownaborttimeout",level:3},{value:"worker.logger",id:"workerlogger",level:3},{value:"worker.maxPoolSize",id:"workermaxpoolsize",level:3},{value:"worker.maxResetLockedInterval",id:"workermaxresetlockedinterval",level:3},{value:"worker.minResetLockedInterval",id:"workerminresetlockedinterval",level:3},{value:"worker.pollInterval",id:"workerpollinterval",level:3},{value:"worker.preparedStatements",id:"workerpreparedstatements",level:3},{value:"worker.schema",id:"workerschema",level:3},{value:"worker.taskDirectory",id:"workertaskdirectory",level:3},{value:"worker.useNodeTime",id:"workerusenodetime",level:3}],u={toc:p},g="wrapper";function c(e){let{components:n,...r}=e;return(0,o.yg)(g,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Graphile Worker does not require a configuration file, but you may find that\nhaving a configuration file means you don't have to remember all the CLI flags\neach time you run it."),(0,o.yg)("p",null,"Graphile Worker is configured via a ",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.js")," (or ",(0,o.yg)("inlineCode",{parentName:"p"},".ts"),", ",(0,o.yg)("inlineCode",{parentName:"p"},".mjs"),', ...)\nfile. This file must export a "Graphile Config preset" which is a POJO (plain\nold JavaScript object) containing keys such as ',(0,o.yg)("inlineCode",{parentName:"p"},"extends")," (to merge in extra\npresets), ",(0,o.yg)("inlineCode",{parentName:"p"},"plugins")," (to add plugins) and in our case ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," which contains the\nsettings for Graphile Worker."),(0,o.yg)("h2",{id:"examples"},"Examples"),(0,o.yg)("p",null,"Here's an example in JavaScript:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},'module.exports = {\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    maxPoolSize: 10,\n    pollInterval: 2000,\n    preparedStatements: true,\n    schema: "graphile_worker",\n    crontabFile: "crontab",\n    concurrentJobs: 1,\n    fileExtensions: [".js", ".cjs", ".mjs"],\n  },\n};\n')),(0,o.yg)("p",null,"And an equivalent configuration in TypeScript:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import type {} from "graphile-config";\nimport type {} from "graphile-worker";\n\nconst preset: GraphileConfig.Preset = {\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    maxPoolSize: 10,\n    pollInterval: 2000,\n    preparedStatements: true,\n    schema: "graphile_worker",\n    crontabFile: "crontab",\n    concurrentJobs: 1,\n    fileExtensions: [".js", ".cjs", ".mjs"],\n  },\n};\n\nexport default preset;\n')),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"TypeScript uses the imports just so it understands what options are available,\nthese will not be included in the output JavaScript.")),(0,o.yg)("h2",{id:"worker-options"},(0,o.yg)("inlineCode",{parentName:"h2"},"worker")," options"),(0,o.yg)("p",null,"The options available will be influenced by the plugins and presets you are\nusing in your configuration (if any). To see the full list, you can use\nTypeScript's autocomplete, or run ",(0,o.yg)("inlineCode",{parentName:"p"},"graphile config options")," (assuming you have a\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.ts")," file)."),(0,o.yg)("p",null,"Here are the options under the ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," key as defined by\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile config options")," when no plugins or presets are in use:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"{\n  concurrentJobs?: number;\n  connectionString?: string;\n  crontabFile?: string;\n  events?: WorkerEvents;\n  fileExtensions?: string[];\n  gracefulShutdownAbortTimeout?: number;\n  logger?: Logger<{}>;\n  maxPoolSize?: number;\n  maxResetLockedInterval?: number;\n  minResetLockedInterval?: number;\n  pollInterval?: number;\n  preparedStatements?: boolean;\n  schema?: string;\n  taskDirectory?: string;\n  useNodeTime?: boolean;\n}\n")),(0,o.yg)("h3",{id:"workerconcurrentjobs"},"worker.concurrentJobs"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"Number of jobs to run concurrently."),(0,o.yg)("h3",{id:"workerconnectionstring"},"worker.connectionString"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"Database ",(0,o.yg)("a",{parentName:"p",href:"/docs/connection-string"},"connection string"),"."),(0,o.yg)("h3",{id:"workercrontabfile"},"worker.crontabFile"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"Override path to crontab file."),(0,o.yg)("h3",{id:"workerevents"},"worker.events"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"WorkerEvents | undefined")),(0,o.yg)("p",null,"A Node.js ",(0,o.yg)("inlineCode",{parentName:"p"},"EventEmitter")," that exposes certain events within the runner (see\n",(0,o.yg)("a",{parentName:"p",href:"/docs/worker-events"},(0,o.yg)("inlineCode",{parentName:"a"},"WorkerEvents")),")."),(0,o.yg)("h3",{id:"workerfileextensions"},"worker.fileExtensions"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string[] | undefined")),(0,o.yg)("p",null,"A list of file extensions (in priority order) that Graphile Worker should\nattempt to import directly when loading tasks. Defaults to\n",(0,o.yg)("inlineCode",{parentName:"p"},'[".js", ".cjs", ".mjs"]'),"."),(0,o.yg)("h3",{id:"workergracefulshutdownaborttimeout"},"worker.gracefulShutdownAbortTimeout"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How long in milliseconds after a gracefulShutdown is triggered should we wait to\ntrigger the AbortController, which should cancel supported asynchronous actions?"),(0,o.yg)("h3",{id:"workerlogger"},"worker.logger"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"Logger<{}> | undefined")),(0,o.yg)("p",null,"A Logger instance."),(0,o.yg)("h3",{id:"workermaxpoolsize"},"worker.maxPoolSize"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"Maximum number of concurrent connections to Postgres; must be at least ",(0,o.yg)("inlineCode",{parentName:"p"},"2"),". This\nnumber can be lower than ",(0,o.yg)("inlineCode",{parentName:"p"},"concurrentJobs"),", however a low pool size may cause\nissues - if all your pool clients are busy then no jobs can be started or\nreleased. If in doubt, we recommend setting it to ",(0,o.yg)("inlineCode",{parentName:"p"},"10")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"concurrentJobs + 2"),",\nwhichever is larger. (Note: if your task executors use this pool, then an even\nlarger value may be needed for optimum performance, depending on the shape of\nyour logic.)"),(0,o.yg)("h3",{id:"workermaxresetlockedinterval"},"worker.maxResetLockedInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Experimental")),(0,o.yg)("p",null,"The upper bound of how long we'll wait between scans for jobs that have been\nlocked too long. See ",(0,o.yg)("inlineCode",{parentName:"p"},"minResetLockedInterval"),"."),(0,o.yg)("h3",{id:"workerminresetlockedinterval"},"worker.minResetLockedInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Experimental")),(0,o.yg)("p",null,"How often should we scan for jobs that have been locked too long and release\nthem? This is the minimum interval, we'll choose a time between this and\n",(0,o.yg)("inlineCode",{parentName:"p"},"maxResetLockedInterval"),"."),(0,o.yg)("h3",{id:"workerpollinterval"},"worker.pollInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("h3",{id:"workerpreparedstatements"},"worker.preparedStatements"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean | undefined")),(0,o.yg)("h3",{id:"workerschema"},"worker.schema"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"The database schema in which Graphile Worker is (to be) located."),(0,o.yg)("h3",{id:"workertaskdirectory"},"worker.taskDirectory"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"Override path to find tasks"),(0,o.yg)("h3",{id:"workerusenodetime"},"worker.useNodeTime"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean | undefined")),(0,o.yg)("p",null,"Set ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," to use the time as recorded by Node.js rather than PostgreSQL. It's\nstrongly recommended that you ensure the Node.js and PostgreSQL times are\nsynchronized, making this setting moot."))}c.isMDXComponent=!0}}]);