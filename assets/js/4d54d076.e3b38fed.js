"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[1459],{9916:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>c});var o=t(3696);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(t),d=a,c=g["".concat(s,".").concat(d)]||g[d]||m[d]||r;return t?o.createElement(c,i(i({ref:n},u),{},{components:t})):o.createElement(c,i({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(8102),a=(t(3696),t(9916));const r={title:"Contributing",sidebar_position:170},i=void 0,l={unversionedId:"contributing",id:"contributing",title:"Contributing",description:"We love contributions from the community; but please: if you are planning to do",source:"@site/docs/contributing.md",sourceDirName:".",slug:"/contributing",permalink:"/docs/contributing",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/contributing.md",tags:[],version:"current",sidebarPosition:170,frontMatter:{title:"Contributing",sidebar_position:170},sidebar:"tutorialSidebar",previous:{title:"Project status",permalink:"/docs/project-status"},next:{title:"Uninstall/Reset",permalink:"/docs/uninstall"}},s={},p=[{value:"Development",id:"development",level:2},{value:"Setup",id:"setup",level:3},{value:"Ensure PostgreSQL is running",id:"ensure-postgresql-is-running",level:3},{value:"Automated Functional Testing",id:"automated-functional-testing",level:3},{value:"Running in CLI Mode",id:"running-in-cli-mode",level:3},{value:"Running in Library Mode",id:"running-in-library-mode",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Authoring Database Migrations",id:"authoring-database-migrations",level:3},{value:"Developing With Windows Machines",id:"developing-with-windows-machines",level:3},{value:"Contributing to the Documentation",id:"contributing-to-the-documentation",level:2}],u={toc:p},g="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,o.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"We love contributions from the community; but please: if you are planning to do\nsomething big, talk to us first. Graphile Worker is quite opinionated and\nprioritizes performance over many other things, so there is a risk that we may\nnot want your feature in core, and we do not want you to waste your time!"),(0,a.yg)("h2",{id:"development"},"Development"),(0,a.yg)("h3",{id:"setup"},"Setup"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Ensure ",(0,a.yg)("inlineCode",{parentName:"li"},"yarn")," is installed (e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"npm install -g yarn"),")."),(0,a.yg)("li",{parentName:"ol"},"Fork and clone the (Graphile Worker git\nrepository)","[https://github.com/graphile/worker]"),(0,a.yg)("li",{parentName:"ol"},"From the root of your local Graphile Worker repository, run ",(0,a.yg)("inlineCode",{parentName:"li"},"yarn install"))),(0,a.yg)("h3",{id:"ensure-postgresql-is-running"},"Ensure PostgreSQL is running"),(0,a.yg)("p",null,'We assume you have a local PostgreSQL server running in "trust" authentication\nmode. Other options may or may not work - you may need to set ',(0,a.yg)("inlineCode",{parentName:"p"},"PGHOST"),",\n",(0,a.yg)("inlineCode",{parentName:"p"},"PGPORT"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"PGUSER"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"PGPASSWORD")," and/or similar config variables."),(0,a.yg)("p",null,"If you don't have such a server, you can use docker to run it locally:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Run a temporary postgres instance on port 6432\ndocker run --rm -it -e POSTGRES_HOST_AUTH_METHOD=trust -p 6432:5432 postgres:17\n")),(0,a.yg)("p",null,"Note that this Docker will keep running until you kill it (e.g. with ",(0,a.yg)("inlineCode",{parentName:"p"},"Ctrl-C"),")\nand thus you will need to continue with a different terminal window."),(0,a.yg)("p",null,"Be sure to set the required environmental variables for this setup before you\nattempt to run the tests; you will need these for each terminal window that you\nattempt to run the tests from:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"export PGUSER=postgres\nexport PGHOST=127.0.0.1\nexport PGPORT=6432\n")),(0,a.yg)("p",null,"The command ",(0,a.yg)("inlineCode",{parentName:"p"},"psql postgres")," should now work (exit with ",(0,a.yg)("inlineCode",{parentName:"p"},"Ctrl-D"),"). We require\n",(0,a.yg)("inlineCode",{parentName:"p"},"psql")," to install the test fixtures; if you don't have ",(0,a.yg)("inlineCode",{parentName:"p"},"psql")," installed, install\nit using your operating system's package manager or from the\n",(0,a.yg)("a",{parentName:"p",href:"https://www.postgresql.org/download/"},"PostgreSQL website"),", for example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo apt update && sudo apt install postgresql-client\n")),(0,a.yg)("h3",{id:"automated-functional-testing"},"Automated Functional Testing"),(0,a.yg)("p",null,"Graphile Worker leans on its automated tests to prevent regressions in\nfunctionality and performance. After making any change to the source code, you\nshould run the test suite to ensure that you did not introduce any regressions.\nAny edit to the expected behavior should also include an accompanying additon to\nthe test suite to prevent future regressions."),(0,a.yg)("p",null,"You must have a running Postgres database to run the tests. The test framework\ncreates a template database. Each test clones the template database on demand.\nThis allows the tests to run in parallel."),(0,a.yg)("p",null,"Run ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn test")," to run the tests, this will also set up the database."),(0,a.yg)("admonition",{title:"Debugging",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If you're having some trouble, you can run the tests in stages."),(0,a.yg)("ol",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ol"},"Compile the code: ",(0,a.yg)("inlineCode",{parentName:"li"},"yarn prepack")),(0,a.yg)("li",{parentName:"ol"},"Setup the test DB: ",(0,a.yg)("inlineCode",{parentName:"li"},"yarn test:setupdb")),(0,a.yg)("li",{parentName:"ol"},"Run the tests: ",(0,a.yg)("inlineCode",{parentName:"li"},"yarn test:only")))),(0,a.yg)("admonition",{title:"Do not create a 'tasks' folder at the root!",type:"warning"},(0,a.yg)("p",{parentName:"admonition"},"If you have any files in ",(0,a.yg)("inlineCode",{parentName:"p"},"./tasks"),", some tests will fail.")),(0,a.yg)("h3",{id:"running-in-cli-mode"},"Running in CLI Mode"),(0,a.yg)("p",null,"When users run the ",(0,a.yg)("inlineCode",{parentName:"p"},"graphile-worker")," command they actually execute the script\ndefined in ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json")," under ",(0,a.yg)("inlineCode",{parentName:"p"},"bin.graphile-worker"),", which is ",(0,a.yg)("inlineCode",{parentName:"p"},"dist/cli.js"),"\n(corresponding with the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/cli.ts")," source file)."),(0,a.yg)("p",null,"To run your local version of Graphile Worker similarly, run the ",(0,a.yg)("inlineCode",{parentName:"p"},"dist/cli.js"),"\nfile with ",(0,a.yg)("inlineCode",{parentName:"p"},"node")," directly. It will fail to start if you don't have any tasks, so\nyou should create a tasks folder first (but not in the root!):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn prepack\nmkdir -p _LOCAL/tasks\necho 'module.exports = () => {}' > _LOCAL/tasks/hello.js\ncd _LOCAL\nnode ../dist/cli.js -c \"postgres:///my_db\"\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"Keep ",(0,a.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"dist")," up to date with ",(0,a.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"yarn watch")),(0,a.yg)("p",{parentName:"admonition"},"In development it's generally annoying to have to remember to run ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn prepack"),"\nbefore each action. Instead, run ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn watch")," in a different terminal and the\n",(0,a.yg)("inlineCode",{parentName:"p"},"dist")," folder will stay up to date as you edit the source code.")),(0,a.yg)("p",null,"See the ",(0,a.yg)("a",{parentName:"p",href:"/docs/cli/run"},"CLI documentation")," for more information about CLI mode."),(0,a.yg)("h3",{id:"running-in-library-mode"},"Running in Library Mode"),(0,a.yg)("p",null,"When Graphile Worker users run in library mode, they use the functions exported\nfrom ",(0,a.yg)("inlineCode",{parentName:"p"},"src/index.ts"),". The scrappiest thing you can do to run your local version\nof Graphile Worker similarly is to create a Typescript file that runs functions\nimported from ",(0,a.yg)("inlineCode",{parentName:"p"},"."),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/temp.ts"',title:'"src/temp.ts"'},'import { run, WorkerPreset } from ".";\n\nasync function main() {\n  const runner = await run({\n    taskList: {\n      hello: async (_, helpers) => {\n        helpers.logger.info("Hello, world!");\n      },\n    },\n    preset: {\n      extends: [WorkerPreset],\n      worker: {\n        connectionString: "postgres:///my_db",\n      },\n    },\n  });\n\n  await runner.promise;\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')),(0,a.yg)("p",null,"Then you can run ",(0,a.yg)("inlineCode",{parentName:"p"},"temp.ts")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"ts-node"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn run ts-node src/temp.ts\n")),(0,a.yg)("p",null,"You have to remember not to commit ",(0,a.yg)("inlineCode",{parentName:"p"},"src/temp.ts"),", so a cleaner way to achieve\nthis would be using ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn link"),". In the root of your local Graphile Worker\nrepository run the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn link\n")),(0,a.yg)("p",null,"Create another node.js project with yarn that imports from ",(0,a.yg)("inlineCode",{parentName:"p"},"graphile-worker"),"\nlike it would if it was using the published package. In that directory, run the\nfollowing:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn link graphile-worker\n")),(0,a.yg)("p",null,"Note that once you link, you still need to compile your local graphile-worker\npackage any time you make a change in the package that you want to test. You can\ncompile with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn prepack\n")),(0,a.yg)("p",null,"If you're making frequent changes, you may want to automatically recompile any\ntime there is a change. You can do so with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn watch\n")),(0,a.yg)("p",null,"See the ",(0,a.yg)("a",{parentName:"p",href:"https://classic.yarnpkg.com/lang/en/docs/cli/link/"},"yarn link")," docs for\nmore information about how linking works, including instructions for unlinking."),(0,a.yg)("h3",{id:"docker-compose"},"Docker Compose"),(0,a.yg)("p",null,"Some people run their Graphile Worker development environments in Docker\nCompose. If this is you, please contribute back fixes to the setup, because our\nlead maintainer does not use it."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"docker-compose.yml")," file starts a minimal setup with a ",(0,a.yg)("inlineCode",{parentName:"p"},"db")," container\ncontaining a Postgres database and an ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," container that is similar to running\nin CLI mode."),(0,a.yg)("p",null,"To rebuild the docker containers, run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"docker compose build\n")),(0,a.yg)("p",null,"To run the ",(0,a.yg)("inlineCode",{parentName:"p"},"db")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," containers in the backround, run the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"docker compose up -d\n")),(0,a.yg)("p",null,"You can run the tests via:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"docker compose exec app yarn test\n")),(0,a.yg)("p",null,"Tail the containers' logs the with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"docker compose logs -f\n")),(0,a.yg)("h3",{id:"authoring-database-migrations"},"Authoring Database Migrations"),(0,a.yg)("p",null,"New database migrations must be accompanied by an updated db dump. Before\ngenerating a new dump, ensure the following:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"You have a Postgres running as described above."),(0,a.yg)("li",{parentName:"ol"},"You have ",(0,a.yg)("inlineCode",{parentName:"li"},"pg_dump"),", and the version of ",(0,a.yg)("inlineCode",{parentName:"li"},"pg_dump")," is the same major version of\nyour Postgres database.")),(0,a.yg)("p",null,"To check your ",(0,a.yg)("inlineCode",{parentName:"p"},"pg_dump")," version, run the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"pg_dump --version\n")),(0,a.yg)("p",null,"To check your Postgres version, run the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},'psql postgres:///template1 -c "SELECT version();"\n')),(0,a.yg)("p",null,"To update the db dump, run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sh"},"yarn db:dump\n")),(0,a.yg)("h3",{id:"developing-with-windows-machines"},"Developing With Windows Machines"),(0,a.yg)("p",null,"The maintainer does not have access to a Windows development machine, so he\ncannot ensure that the development environment works."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/pull/316#issuecomment-1427173046"},"This comment"),"\nsuggests that at least one change needs to be made to support contributing from\na Windows machine. If you use Windows and want to help here, please do!"),(0,a.yg)("p",null,"One option is to try using the docker-compose setup detailed above."),(0,a.yg)("h2",{id:"contributing-to-the-documentation"},"Contributing to the Documentation"),(0,a.yg)("p",null,"The docs are maintained in the\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/tree/main/website/docs"},"main Graphile Worker Repository"),".\nSee the\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/website/README.md"},"Website README"),"\nfor more info on the website."))}m.isMDXComponent=!0}}]);