"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[9504],{9916:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>c});var a=n(3696);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(n),h=i,c=g["".concat(s,".").concat(h)]||g[h]||u[h]||r;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(8102),i=(n(3696),n(9916));const r={title:"Task executors",sidebar_position:45,toc_max_heading_level:5},o=void 0,l={unversionedId:"tasks",id:"tasks",title:"Task executors",description:"A &ldquo;job&rdquo; is a description of a single &ldquo;job to be done&rdquo;",source:"@site/docs/tasks.md",sourceDirName:".",slug:"/tasks",permalink:"/docs/tasks",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/tasks.md",tags:[],version:"current",sidebarPosition:45,frontMatter:{title:"Task executors",sidebar_position:45,toc_max_heading_level:5},sidebar:"tutorialSidebar",previous:{title:"Connection strings",permalink:"/docs/connection-string"},next:{title:"Worker Pro!",permalink:"/docs/pro/"}},s={},p=[{value:"Task executor function",id:"task-executor-function",level:2},{value:"Example JS task executors",id:"example-js-task-executors",level:2},{value:"The task directory",id:"the-task-directory",level:2},{value:"Loading JavaScript files",id:"loading-javascript-files",level:2},{value:"Loading TypeScript files",id:"loading-typescript-files",level:3},{value:"Loading executable files",id:"loading-executable-files",level:2},{value:"Environment variables",id:"environment-variables",level:3},{value:"Payload format: &quot;json&quot;",id:"payload-format-json",level:3},{value:"Handling batch jobs",id:"handling-batch-jobs",level:2},{value:"<code>helpers</code>",id:"helpers",level:2},{value:"<code>helpers.abortPromise</code>",id:"helpersabortpromise",level:3},{value:"<code>helpers.abortSignal</code>",id:"helpersabortsignal",level:3},{value:"<code>helpers.addJob()</code>",id:"helpersaddjob",level:3},{value:"<code>helpers.addJobs()</code>",id:"helpersaddjobs",level:3},{value:"<code>helpers.getQueueName()</code>",id:"helpersgetqueuename",level:3},{value:"<code>helpers.job</code>",id:"helpersjob",level:3},{value:"<code>helpers.logger</code>",id:"helperslogger",level:3},{value:"<code>helpers.query()</code>",id:"helpersquery",level:3},{value:"<code>helpers.withPgClient()</code>",id:"helperswithpgclient",level:3}],d={toc:p},g="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(g,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"A ","\u201c","job","\u201d"," is a description of a single ","\u201c","job to be done","\u201d","\nstored into the database via the JS ",(0,i.yg)("inlineCode",{parentName:"p"},"addJob()")," function or SQL\n",(0,i.yg)("inlineCode",{parentName:"p"},"graphile_worker.add_job()")," function."),(0,i.yg)("p",null,"A ","\u201c","task","\u201d"," is the type of work that a job may take, for example\n","\u201c","send email","\u201d",", ","\u201c","convert image","\u201d"," or ","\u201c","process\nwebhook","\u201d",". A ","\u201c","task identifier","\u201d"," is a unique name given to a\ntask, for example ",(0,i.yg)("inlineCode",{parentName:"p"},"send_email")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"convert_image"),". A ","\u201c","task executor","\u201d","\nis the function to execute when a job with the associated task identifier is\nfound."),(0,i.yg)("h2",{id:"task-executor-function"},"Task executor function"),(0,i.yg)("p",null,"A task executor is a simple async JS function which: receives as input the job\npayload and a collection of helpers, does the work, and then returns. If the\ntask executor returns successfully then the job is deemed a success and is\ndeleted from the queue (unless this is a ","\u201c","batch job","\u201d","). If it throws\nan error (or, equivalently, rejects the promise) then the job is deemed a\nfailure and the task is rescheduled using an exponential-backoff algorithm."),(0,i.yg)("p",null,"Each task function is passed two arguments:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"payload")," ","\u2014"," the JSON payload you passed when calling\n",(0,i.yg)("inlineCode",{parentName:"li"},"graphile_worker.add_job(...)")," in the database, or ",(0,i.yg)("inlineCode",{parentName:"li"},"addJob(...)")," via the JS\nAPI"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"helpers")," see ",(0,i.yg)("a",{parentName:"li",href:"#helpers"},(0,i.yg)("inlineCode",{parentName:"a"},"helpers"))," below")),(0,i.yg)("admonition",{title:"Important",type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"Your task executors must wait for all asynchronous work for a job to be\ncompleted before returning, otherwise Graphile Worker might think they were\nsuccessful prematurely. Every promise that a task executor triggers must be\n",(0,i.yg)("inlineCode",{parentName:"p"},"await"),"-ed; task executors ",(0,i.yg)("em",{parentName:"p"},"should not")," create ","\u201c","untethered","\u201d","\npromises.")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Graphile Worker automatically retries the job if it fails, so it","'","s often\nsensible to split a large job into multiple smaller jobs, this also allows them\nto run in parallel resulting in faster execution. This is particularly important\nfor tasks that are not idempotent (i.e. running them a second time will have\nextra side effects) ","\u2014"," for example sending emails.")),(0,i.yg)("h2",{id:"example-js-task-executors"},"Example JS task executors"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_1.js"',title:'"tasks/task_1.js"'},"module.exports = async (payload) => {\n  await doMyLogicWith(payload);\n};\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_2.js"',title:'"tasks/task_2.js"'},"module.exports = async (payload, helpers) => {\n  // async is optional, but best practice\n  helpers.logger.debug(`Received ${JSON.stringify(payload)}`);\n};\n")),(0,i.yg)("h2",{id:"the-task-directory"},"The task directory"),(0,i.yg)("p",null,"When you run Graphile Worker, it will look in the configured\n",(0,i.yg)("a",{parentName:"p",href:"./config#workertaskdirectory"},(0,i.yg)("inlineCode",{parentName:"a"},"taskDirectory"))," for files suitable to run as\ntasks."),(0,i.yg)("p",null,"File names excluding the extension and folder names must only use alphanumeric\ncharacters, underscores, and dashes (",(0,i.yg)("inlineCode",{parentName:"p"},"/^[A-Za-z0-9_-]+$/"),") to be recognized."),(0,i.yg)("p",null,"Graphile Worker will then attempt to load the file as a task executor; the task\nidentifier for this task will be all the folders and the file name (excluding\nthe extension) joined with ",(0,i.yg)("inlineCode",{parentName:"p"},"/")," characters:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"${taskDirectory}/send_notification.js")," would get the task identifier\n",(0,i.yg)("inlineCode",{parentName:"li"},"send_notification"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"${taskDirectory}/users/emails/verify.js")," would get the task identifier\n",(0,i.yg)("inlineCode",{parentName:"li"},"users/emails/verify"),".")),(0,i.yg)("p",null,"How the file is loaded as a task executor will depend on the specific file and\nthe plugins you have loaded."),(0,i.yg)("h2",{id:"loading-javascript-files"},"Loading JavaScript files"),(0,i.yg)("p",null,"With the default preset, Graphile Worker will load ",(0,i.yg)("inlineCode",{parentName:"p"},".js"),", ",(0,i.yg)("inlineCode",{parentName:"p"},".cjs")," and ",(0,i.yg)("inlineCode",{parentName:"p"},".mjs"),"\nfiles as task executors using the ",(0,i.yg)("inlineCode",{parentName:"p"},"import()")," function. If the file is a CommonJS\nmodule, then Worker will expect ",(0,i.yg)("inlineCode",{parentName:"p"},"module.exports")," to be the task executor\nfunction; if the file is an ECMAScript module (ESM) then Worker will expect the\ndefault export to be the task executor function."),(0,i.yg)("p",null,"You can add support for other ways of loading task executors via plugins; look\nat the source code of\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/src/plugins/LoadTaskFromJsPlugin.ts"},(0,i.yg)("inlineCode",{parentName:"a"},"LoadTaskFromJsPlugin.ts")),"\nfor inspiration."),(0,i.yg)("h3",{id:"loading-typescript-files"},"Loading TypeScript files"),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"For performance and memory usage reasons, we recommend that you compile\nTypeScript files to JS and then have Graphile Worker load the JS files.")),(0,i.yg)("p",null,"To load TypeScript files directly as task executors (without precompilation),\none way is to do the following:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Install ",(0,i.yg)("inlineCode",{parentName:"li"},"ts-node"),"."),(0,i.yg)("li",{parentName:"ol"},"Add ",(0,i.yg)("inlineCode",{parentName:"li"},'".ts"')," to the ",(0,i.yg)("inlineCode",{parentName:"li"},"worker.fileExtensions")," list in your preset."),(0,i.yg)("li",{parentName:"ol"},"Run Graphile Worker with the environment variable\n",(0,i.yg)("inlineCode",{parentName:"li"},'NODE_OPTIONS="--loader ts-node/esm"')," set.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example graphile.config.ts"',title:'"Example','graphile.config.ts"':!0},'import { WorkerPreset } from "graphile-worker";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [WorkerPreset],\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    concurrentJobs: 5,\n    fileExtensions: [".js", ".cjs", ".mjs", ".ts", ".cts", ".mts"],\n  },\n};\n\nexport default preset;\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash",metastring:"title=\"Running graphile-worker with '--loader ts-node/esm'\"",title:'"Running',"graphile-worker":!0,with:!0,"'--loader":!0,"ts-node/esm'\"":!0},'NODE_OPTIONS="--loader ts-node/esm" graphile-worker -c ...\n# OR: node --loader ts-node/esm node_modules/.bin/graphile-worker -c ...\n')),(0,i.yg)("h2",{id:"loading-executable-files"},"Loading executable files"),(0,i.yg)("admonition",{title:"Experimental",type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"This feature is currently experimental.")),(0,i.yg)("p",null,"If you're running on Linux or Unix (including macOS) then if Graphile Worker\nfinds an executable file inside of the ",(0,i.yg)("inlineCode",{parentName:"p"},"taskDirectory")," it will create a task\nexecutor for it. When a task of this kind is found, Graphile Worker will execute\nthe file with the relevant environment variables and pass in the payload\naccording to the encoding. If the executable exits with code ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," then Graphile\nWorker will see this as success. All other exit codes are seen as failure."),(0,i.yg)("p",null,"This feature is added via the\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/src/plugins/LoadTaskFromExecutableFilePlugin.ts"},"LoadTaskFromExecutableFilePlugin plugin"),"\nin the default\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/src/preset.ts"},"Worker Preset"),"."),(0,i.yg)("h3",{id:"environment-variables"},"Environment variables"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_PAYLOAD_FORMAT")," ","\u2014"," the encoding that Graphile Worker\nused to pass the payload to the binary. Currently this will be the string\n",(0,i.yg)("inlineCode",{parentName:"li"},"json"),", but you should check this before processing the payload in case the\nformat changes."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_TASK_IDENTIFIER")," ","\u2014"," the identifier for the task this\nfile represents (useful if you want multiple task identifiers to be served by\nthe same binary file, e.g. via symlinks)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_ID")," ","\u2014"," the ID of the job in the database"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_KEY")," ","\u2014"," the ",(0,i.yg)("a",{parentName:"li",href:"/docs/job-key"},"Job Key")," the job was\ncreated with, if any"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_ATTEMPTS")," ","\u2014"," the number of attempts that we've made\nto execute this job; starts at 1"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_MAX_ATTEMPTS")," ","\u2014"," the maximum number of attempts\nwe'll try"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_PRIORITY")," ","\u2014"," the numeric priority the job was\ncreated with"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_RUN_AT")," ","\u2014"," when the job is scheduled to run (can be\nused to detect delayed jobs)")),(0,i.yg)("h3",{id:"payload-format-json"},'Payload format: "json"'),(0,i.yg)("p",null,"In the JSON payload format, your binary will be fed via stdin\n",(0,i.yg)("inlineCode",{parentName:"p"},"JSON.stringify({payload})"),"; for example, if you did\n",(0,i.yg)("inlineCode",{parentName:"p"},"addJob('my_script', {mol: 42})")," then your ",(0,i.yg)("inlineCode",{parentName:"p"},"my_script")," task would be sent\n",(0,i.yg)("inlineCode",{parentName:"p"},'{"payload":{"mol":42}}')," via stdin."),(0,i.yg)("h2",{id:"handling-batch-jobs"},"Handling batch jobs"),(0,i.yg)("p",null,"If the payload is an array, then ",(0,i.yg)("em",{parentName:"p"},"optionally")," your task executor may choose to\nreturn an array of the same length, the entries in which are promises. Should\nany of these promises reject, then the job will be re-enqueued, but the payload\nwill be overwritten to only contain the entries associated with the rejected\npromises ","\u2014"," i.e. the successful entries will be removed."),(0,i.yg)("h2",{id:"helpers"},(0,i.yg)("inlineCode",{parentName:"h2"},"helpers")),(0,i.yg)("h3",{id:"helpersabortpromise"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.abortPromise")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Experimental")),(0,i.yg)("p",null,"This is a promise that will reject when ",(0,i.yg)("a",{parentName:"p",href:"#helpersabortsignal"},(0,i.yg)("inlineCode",{parentName:"a"},"abortSignal")),"\naborts. This makes it convenient for exiting your task when the abortSignal\nfires: ",(0,i.yg)("inlineCode",{parentName:"p"},"Promise.race([abortPromise, doYourAsyncThing()])"),"."),(0,i.yg)("h3",{id:"helpersabortsignal"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.abortSignal")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Experimental")),(0,i.yg)("p",null,"This is a ",(0,i.yg)("inlineCode",{parentName:"p"},"AbortSignal")," that will be triggered when the job should exit early.\nIt is used, for example, for a graceful shutdown request. ",(0,i.yg)("inlineCode",{parentName:"p"},"AbortSignal"),"s can be\npassed to a number of asynchronous Node.js methods like\n",(0,i.yg)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#httprequesturl-options-callback"},(0,i.yg)("inlineCode",{parentName:"a"},"http.request()")),"."),(0,i.yg)("h3",{id:"helpersaddjob"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.addJob()")),(0,i.yg)("p",null,"See ",(0,i.yg)("a",{parentName:"p",href:"/docs/library/add-job"},(0,i.yg)("inlineCode",{parentName:"a"},"addJob")),"."),(0,i.yg)("h3",{id:"helpersaddjobs"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.addJobs()")),(0,i.yg)("p",null,"See ",(0,i.yg)("a",{parentName:"p",href:"/docs/library/add-job#add-jobs"},(0,i.yg)("inlineCode",{parentName:"a"},"addJobs")),"."),(0,i.yg)("h3",{id:"helpersgetqueuename"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.getQueueName()")),(0,i.yg)("p",null,"Get the queue name of the given queue ID (or of the currently executing job if\nno queue ID is specified). This function may or may not return a promise. We\nrecommend that you always ",(0,i.yg)("inlineCode",{parentName:"p"},"await")," it."),(0,i.yg)("h3",{id:"helpersjob"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.job")),(0,i.yg)("p",null,"The whole, currently executing job, including ",(0,i.yg)("inlineCode",{parentName:"p"},"uuid"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"attempts"),", etc."),(0,i.yg)("h3",{id:"helperslogger"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.logger")),(0,i.yg)("p",null,"A logger instance scoped to this job. See ",(0,i.yg)("a",{parentName:"p",href:"./library/logger"},"Logger")),(0,i.yg)("h3",{id:"helpersquery"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.query()")),(0,i.yg)("p",null,"This is a convenience wrapper for\n",(0,i.yg)("inlineCode",{parentName:"p"},"withPgClient(pgClient => pgClient.query(sql, values))"),". See\n",(0,i.yg)("a",{parentName:"p",href:"#helperswithpgclient"},(0,i.yg)("inlineCode",{parentName:"a"},"withPgClient()"))),(0,i.yg)("h3",{id:"helperswithpgclient"},(0,i.yg)("inlineCode",{parentName:"h3"},"helpers.withPgClient()")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"withPgClient")," gets a ",(0,i.yg)("inlineCode",{parentName:"p"},"pgClient")," from the pool that Graphile Worker uses. It\ncalls ",(0,i.yg)("inlineCode",{parentName:"p"},"await callback(pgClient)"),", and finally releases the client and returns\nthe result of ",(0,i.yg)("inlineCode",{parentName:"p"},"callback"),". This workflow can make testing your tasks easier."),(0,i.yg)("p",null,"Example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'const {\n  rows: [row],\n} = await withPgClient((pgClient) => pgClient.query("select 1 as one"));\n')),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"Neither ",(0,i.yg)("inlineCode",{parentName:"p"},"withPgClient")," nor ",(0,i.yg)("inlineCode",{parentName:"p"},"query")," methods create a database transaction. If you\nneed a database transaction, you should do so yourself, but please note that\nkeeping transactions open may decrease Graphile Worker","'","s performance due to\nincreasing contention over the pool of database clients.")))}u.isMDXComponent=!0}}]);