"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[5950],{9916:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>m});var t=r(3696);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(r),d=o,m=g["".concat(s,".").concat(d)]||g[d]||u[d]||i;return r?t.createElement(m,a(a({ref:n},c),{},{components:r})):t.createElement(m,a({ref:n},c))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6324:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=r(8102),o=(r(3696),r(9916));const i={title:"Configuration",sidebar_position:41},a=void 0,l={unversionedId:"config",id:"config",title:"Configuration",description:"Preset",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/docs/config",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/config.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{title:"Configuration",sidebar_position:41},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Connection strings",permalink:"/docs/connection-string"}},s={},p=[{value:"Preset",id:"preset",level:2},{value:"CLI mode",id:"cli-mode",level:2},{value:"Library mode",id:"library-mode",level:2},{value:"Option precedence",id:"option-precedence",level:3},{value:"Using a configuration file",id:"using-a-configuration-file",level:3},{value:"<code>worker</code> options",id:"worker-options",level:2},{value:"worker.concurrentJobs",id:"workerconcurrentjobs",level:3},{value:"worker.connectionString",id:"workerconnectionstring",level:3},{value:"worker.crontabFile",id:"workercrontabfile",level:3},{value:"worker.events",id:"workerevents",level:3},{value:"worker.fileExtensions",id:"workerfileextensions",level:3},{value:"worker.getQueueNameBatchDelay",id:"workergetqueuenamebatchdelay",level:3},{value:"worker.gracefulShutdownAbortTimeout",id:"workergracefulshutdownaborttimeout",level:3},{value:"worker.logger",id:"workerlogger",level:3},{value:"worker.maxPoolSize",id:"workermaxpoolsize",level:3},{value:"worker.maxResetLockedInterval",id:"workermaxresetlockedinterval",level:3},{value:"worker.minResetLockedInterval",id:"workerminresetlockedinterval",level:3},{value:"worker.pollInterval",id:"workerpollinterval",level:3},{value:"worker.preparedStatements",id:"workerpreparedstatements",level:3},{value:"worker.schema",id:"workerschema",level:3},{value:"worker.taskDirectory",id:"workertaskdirectory",level:3},{value:"worker.useNodeTime",id:"workerusenodetime",level:3},{value:"Configuration via Environment Variables",id:"configuration-via-environment-variables",level:2}],c={toc:p},g="wrapper";function u(e){let{components:n,...r}=e;return(0,o.yg)(g,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"preset"},"Preset"),(0,o.yg)("p",null,'Graphile Worker\'s most common options can be configured via a "Graphile Config\npreset". A preset is a JavaScript object containing keys such as ',(0,o.yg)("inlineCode",{parentName:"p"},"extends")," (to\nmerge in other presets) and ",(0,o.yg)("inlineCode",{parentName:"p"},"plugins")," (to add plugins). In the case of Graphile\nWorker, a preset also contains the ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," key which contains settings specific\nto Graphile Worker."),(0,o.yg)("p",null,"Graphile Worker does not require a dedicated configuration file, but using one\ngives a number of advantages:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"share configuration between library and CLI modes easily"),(0,o.yg)("li",{parentName:"ul"},"share common options between multiple differently configured instances"),(0,o.yg)("li",{parentName:"ul"},"use tooling such as the ",(0,o.yg)("inlineCode",{parentName:"li"},"graphile")," command that uses the configuration file",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"graphile config print")," prints out your resolved configuration nicely\nformatted"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"graphile config options")," details the options that are available for\nconfiguration based on the plugins and presets you are using"))),(0,o.yg)("li",{parentName:"ul"},"you don't have to remember all the flags each time you run the CLI")),(0,o.yg)("p",null,"We therefore recommend that the preset be the default export of a\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.js")," (or ",(0,o.yg)("inlineCode",{parentName:"p"},".ts"),", ",(0,o.yg)("inlineCode",{parentName:"p"},".mjs"),", etc.) file."),(0,o.yg)("p",null,"Here's an example in JavaScript:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.js"',title:'"graphile.config.js"'},'const { WorkerPreset } = require("graphile-worker");\n\nmodule.exports = {\n  extends: [WorkerPreset],\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    maxPoolSize: 10,\n    pollInterval: 2000,\n    preparedStatements: true,\n    schema: "graphile_worker",\n    crontabFile: "crontab",\n    concurrentJobs: 1,\n    fileExtensions: [".js", ".cjs", ".mjs"],\n  },\n};\n')),(0,o.yg)("p",null,"And an equivalent configuration in TypeScript:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import { WorkerPreset } from "graphile-worker";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [WorkerPreset],\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    maxPoolSize: 10,\n    pollInterval: 2000,\n    preparedStatements: true,\n    schema: "graphile_worker",\n    crontabFile: "crontab",\n    concurrentJobs: 1,\n    fileExtensions: [".js", ".cjs", ".mjs"],\n  },\n};\n\nexport default preset;\n')),(0,o.yg)("h2",{id:"cli-mode"},"CLI mode"),(0,o.yg)("p",null,"The CLI extends the default\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/src/preset.ts"},"Worker Preset")," with\nthe preset you provide via a config file, and then further extends it with the\nconfiguration specified via CLI flags. Thus, CLI flags take precedence over the\nconfig file preset, which takes precedence over the default Worker Preset."),(0,o.yg)("h2",{id:"library-mode"},"Library mode"),(0,o.yg)("p",null,"Many functions exported from the Graphile Worker library accept a Graphile\nConfig preset, including ",(0,o.yg)("inlineCode",{parentName:"p"},"run()"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"runMigrations()"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"runOnce()"),",\n",(0,o.yg)("inlineCode",{parentName:"p"},"makeWorkerUtils()"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"quickAddJob()"),", and more."),(0,o.yg)("h3",{id:"option-precedence"},"Option precedence"),(0,o.yg)("p",null,"We are in the process of transitioning library mode configuration to be done\nprimarily with Graphile Config presets. For now, there is overlap between what\ncan be configured via the preset and via the direct properties of the options\nobject. If a setting is provided by both, the direct property of the options\nobject takes precedence over the setting from the preset. In the following\nexample, Graphile Worker will use the ",(0,o.yg)("inlineCode",{parentName:"p"},"postgres:///my_db")," connection string and\nwill set ",(0,o.yg)("inlineCode",{parentName:"p"},"concurrency"),"/",(0,o.yg)("inlineCode",{parentName:"p"},"concurrentJobs")," to 2."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'const runner = await runOnce({\n  taskDirectory: `${__dirname}/tasks`,\n  connectionString: "postgres:///my_db",\n  // Note that the property names don\'t always line up perfectly between legacy\n  // configuration and the preset options. `concurrency` was renamed to\n  // `concurrentJobs`.\n  concurrency: 2,\n  preset: {\n    worker: {\n      connectionString: "ignored",\n      concurrentJobs: 1,\n    },\n  },\n});\n')),(0,o.yg)("h3",{id:"using-a-configuration-file"},"Using a configuration file"),(0,o.yg)("p",null,"Though you can define presets inline like above, we strongly advise that you\nkeep your configuration in a ",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.js")," (or ",(0,o.yg)("inlineCode",{parentName:"p"},".ts"),", ",(0,o.yg)("inlineCode",{parentName:"p"},".mjs"),", etc) file\nfor the reasons explained ",(0,o.yg)("a",{parentName:"p",href:"#preset"},"in Preset above"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import { WorkerPreset } from "graphile-worker";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [WorkerPreset],\n  worker: {\n    taskDirectory: `${__dirname}/tasks`,\n    connectionString: "postgres:///my_db",\n  },\n};\n\nexport default preset;\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import { run } from "graphile-worker";\nimport preset from "./graphile.config";\n\nasync function main() {\n  const runner = await run({ preset });\n  await runner.promise;\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')),(0,o.yg)("h2",{id:"worker-options"},(0,o.yg)("inlineCode",{parentName:"h2"},"worker")," options"),(0,o.yg)("p",null,"The options available are influenced by the plugins and presets you use in your\nconfiguration (if any). To see the full list, you can use TypeScript's\nautocomplete, or run ",(0,o.yg)("inlineCode",{parentName:"p"},"graphile config options")," (assuming you have a\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.ts")," file)."),(0,o.yg)("p",null,"Here are the options under the ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," key as defined by\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile config options")," when no plugins or presets are in use:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"{\n  concurrentJobs?: number;\n  connectionString?: string;\n  crontabFile?: string;\n  events?: WorkerEvents;\n  fileExtensions?: string[];\n  getQueueNameBatchDelay?: number;\n  gracefulShutdownAbortTimeout?: number;\n  logger?: Logger<{}>;\n  maxPoolSize?: number;\n  maxResetLockedInterval?: number;\n  minResetLockedInterval?: number;\n  pollInterval?: number;\n  preparedStatements?: boolean;\n  schema?: string;\n  taskDirectory?: string;\n  useNodeTime?: boolean;\n}\n")),(0,o.yg)("p",null,"See the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/jcgsville/worker/blob/85c36ac4e684a3a782fc528dca95c8ba6177fa8a/src/config.ts#L13"},"Graphile Worker source"),"\nfor the default ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," options set by the default Worker Preset."),(0,o.yg)("h3",{id:"workerconcurrentjobs"},"worker.concurrentJobs"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"Number of jobs to run concurrently on a single Graphile Worker instance."),(0,o.yg)("h3",{id:"workerconnectionstring"},"worker.connectionString"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"Database ",(0,o.yg)("a",{parentName:"p",href:"/docs/connection-string"},"connection string"),"."),(0,o.yg)("h3",{id:"workercrontabfile"},"worker.crontabFile"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"The path to a file in which Graphile Worker should look for crontab schedules.\nSee: ",(0,o.yg)("a",{parentName:"p",href:"/docs/cron"},"recurring tasks (crontab)"),")."),(0,o.yg)("h3",{id:"workerevents"},"worker.events"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"WorkerEvents | undefined")),(0,o.yg)("p",null,"Provide your own Node.js ",(0,o.yg)("inlineCode",{parentName:"p"},"EventEmitter")," in order to be able to receive events\n(see ",(0,o.yg)("a",{parentName:"p",href:"/docs/worker-events"},(0,o.yg)("inlineCode",{parentName:"a"},"WorkerEvents")),") that occur during Graphile Worker's\nstartup. (Without this, Worker will provision its own ",(0,o.yg)("inlineCode",{parentName:"p"},"EventEmitter"),", but you\ncan't retrieve it until the promise returned by the API you have called has\nresolved.)"),(0,o.yg)("h3",{id:"workerfileextensions"},"worker.fileExtensions"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string[] | undefined")),(0,o.yg)("p",null,"A list of file extensions (in priority order) that Graphile Worker should\nattempt to import as Node modules when loading task executors from the file\nsystem."),(0,o.yg)("h3",{id:"workergetqueuenamebatchdelay"},"worker.getQueueNameBatchDelay"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Experimental")),(0,o.yg)("p",null,"The size, in milliseconds, of the time window over which Graphile Worker will\nbatch requests to retrieve the queue name of a job. Increase the size of this\nwindow for greater efficiency, or reduce it to improve latency."),(0,o.yg)("h3",{id:"workergracefulshutdownaborttimeout"},"worker.gracefulShutdownAbortTimeout"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How long in milliseconds after a gracefulShutdown is triggered should Graphile\nWorker wait to trigger the AbortController, which should cancel supported\nasynchronous actions?"),(0,o.yg)("h3",{id:"workerlogger"},"worker.logger"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"Logger<{}> | undefined")),(0,o.yg)("p",null,"A Logger instance (see ",(0,o.yg)("a",{parentName:"p",href:"/docs/library/logger"},"Logger"),")."),(0,o.yg)("h3",{id:"workermaxpoolsize"},"worker.maxPoolSize"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"Maximum number of concurrent connections to Postgres; must be at least ",(0,o.yg)("inlineCode",{parentName:"p"},"2"),". This\nnumber can be lower than ",(0,o.yg)("inlineCode",{parentName:"p"},"concurrentJobs"),", however a low pool size may cause\nissues: if all your pool clients are busy then no jobs can be started or\nreleased. If in doubt, we recommend setting it to ",(0,o.yg)("inlineCode",{parentName:"p"},"10")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"concurrentJobs + 2"),",\nwhichever is larger. (Note: if your task executors use this pool, then an even\nlarger value may be needed for optimum performance, depending on the shape of\nyour logic.)"),(0,o.yg)("h3",{id:"workermaxresetlockedinterval"},"worker.maxResetLockedInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Experimental")),(0,o.yg)("p",null,"The upper bound of how long (in milliseconds) Graphile Worker will wait between\nscans for jobs that have been locked too long (see ",(0,o.yg)("inlineCode",{parentName:"p"},"minResetLockedInterval"),")."),(0,o.yg)("h3",{id:"workerminresetlockedinterval"},"worker.minResetLockedInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Experimental")),(0,o.yg)("p",null,"How often should Graphile Worker scan for and release jobs that have been locked\ntoo long? This is the minimum interval in milliseconds. Graphile Worker will\nchoose a time between this and ",(0,o.yg)("inlineCode",{parentName:"p"},"maxResetLockedInterval"),"."),(0,o.yg)("h3",{id:"workerpollinterval"},"worker.pollInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("h3",{id:"workerpreparedstatements"},"worker.preparedStatements"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean | undefined")),(0,o.yg)("p",null,"Whether Graphile Worker should use prepared statements. Set ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," if you use\nsoftware (e.g. some Postgres pools) that don't support them."),(0,o.yg)("h3",{id:"workerschema"},"worker.schema"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"The database schema in which Graphile Worker's tables, functions, views, etc are\nlocated. Graphile Worker will create or edit things in this schema as necessary."),(0,o.yg)("h3",{id:"workertaskdirectory"},"worker.taskDirectory"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"string | undefined")),(0,o.yg)("p",null,"The path to a directory in which Graphile Worker should look for task executors."),(0,o.yg)("h3",{id:"workerusenodetime"},"worker.useNodeTime"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"boolean | undefined")),(0,o.yg)("p",null,"Set to ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," to use the time as recorded by Node.js rather than PostgreSQL.\nIt's strongly recommended that you ensure the Node.js and PostgreSQL times are\nsynchronized, making this setting moot."),(0,o.yg)("h2",{id:"configuration-via-environment-variables"},"Configuration via Environment Variables"),(0,o.yg)("p",null,"Some ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," options in the default\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/main/src/preset.ts"},"Worker Preset")," will\nuse environment variables if they are set. Values in your custom preset or CLI\nflags will take precedence over environment variables."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"{\n  connectionString: process.env.DATABASE_URL,\n  schema: process.env.GRAPHILE_WORKER_SCHEMA\n}\n")))}u.isMDXComponent=!0}}]);